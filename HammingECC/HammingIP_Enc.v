// megafunction wizard: %ALTECC%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altecc_encoder 

// ============================================================
// File Name: HammingIP_Enc.v
// Megafunction Name(s):
// 			altecc_encoder
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.1.0 Build 625 09/12/2018 SJ Lite Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//altecc_encoder CBX_AUTO_BLACKBOX="ALL" device_family="Cyclone V" lpm_pipeline=0 width_codeword=12 width_dataword=7 data q
//VERSION_BEGIN 18.1 cbx_altecc_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  HammingIP_Enc_altecc_encoder_96b
	( 
	data,
	q) ;
	input   [6:0]  data;
	output   [11:0]  q;

	wire  [6:0]  data_wire;
	wire  [4:0]  parity_01_wire;
	wire  [2:0]  parity_02_wire;
	wire  [0:0]  parity_03_wire;
	wire  [0:0]  parity_04_wire;
	wire  [10:0]  parity_final_wire;
	wire  [11:0]  q_wire;

	assign
		data_wire = data,
		parity_01_wire = {(data_wire[6] ^ parity_01_wire[3]), (data_wire[4] ^ parity_01_wire[2]), (data_wire[3] ^ parity_01_wire[1]), (data_wire[1] ^ parity_01_wire[0]), data_wire[0]},
		parity_02_wire = {((data_wire[5] ^ data_wire[6]) ^ parity_02_wire[1]), ((data_wire[2] ^ data_wire[3]) ^ parity_02_wire[0]), data_wire[0]},
		parity_03_wire = {((data_wire[1] ^ data_wire[2]) ^ data_wire[3])},
		parity_04_wire = {((data_wire[4] ^ data_wire[5]) ^ data_wire[6])},
		parity_final_wire = {(q_wire[10] ^ parity_final_wire[9]), (q_wire[9] ^ parity_final_wire[8]), (q_wire[8] ^ parity_final_wire[7]), (q_wire[7] ^ parity_final_wire[6]), (q_wire[6] ^ parity_final_wire[5]), (q_wire[5] ^ parity_final_wire[4]), (q_wire[4] ^ parity_final_wire[3]), (q_wire[3] ^ parity_final_wire[2]), (q_wire[2] ^ parity_final_wire[1]), (q_wire[1] ^ parity_final_wire[0]), q_wire[0]},
		q = q_wire,
		q_wire = {parity_final_wire[10], parity_04_wire[0], parity_03_wire[0], parity_02_wire[2], parity_01_wire[4], data_wire};
endmodule //HammingIP_Enc_altecc_encoder_96b
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module HammingIP_Enc (
	data,
	q);

	input	[6:0]  data;
	output	[11:0]  q;

	wire [11:0] sub_wire0;
	wire [11:0] q = sub_wire0[11:0];

	HammingIP_Enc_altecc_encoder_96b	HammingIP_Enc_altecc_encoder_96b_component (
				.data (data),
				.q (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: CONSTANT: lpm_pipeline NUMERIC "0"
// Retrieval info: CONSTANT: width_codeword NUMERIC "12"
// Retrieval info: CONSTANT: width_dataword NUMERIC "7"
// Retrieval info: USED_PORT: data 0 0 7 0 INPUT NODEFVAL "data[6..0]"
// Retrieval info: USED_PORT: q 0 0 12 0 OUTPUT NODEFVAL "q[11..0]"
// Retrieval info: CONNECT: @data 0 0 7 0 data 0 0 7 0
// Retrieval info: CONNECT: q 0 0 12 0 @q 0 0 12 0
// Retrieval info: GEN_FILE: TYPE_NORMAL HammingIP_Enc.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL HammingIP_Enc.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL HammingIP_Enc.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL HammingIP_Enc.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL HammingIP_Enc_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL HammingIP_Enc_bb.v TRUE
